package com.example.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendao.bean.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "mac");
        public final static Property Od = new Property(2, String.class, "od", false, "od");
        public final static Property DeviceType = new Property(3, String.class, "deviceType", false, "deviceType");
        public final static Property SensorType = new Property(4, String.class, "sensorType", false, "sensorType");
        public final static Property Area = new Property(5, String.class, "area", false, "area");
        public final static Property SignalIntensity = new Property(6, String.class, "signalIntensity", false, "signalIntensity");
        public final static Property ConnectionQuality = new Property(7, String.class, "connectionQuality", false, "connectionQuality");
        public final static Property Others = new Property(8, String.class, "others", false, "others");
        public final static Property GatewayMac = new Property(9, String.class, "gatewayMac", false, "gatewayMac");
        public final static Property UpdateTime = new Property(10, String.class, "updateTime", false, "updateTime");
        public final static Property WhichType = new Property(11, int.class, "whichType", false, "whichType");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"mac\" TEXT," + // 1: mac
                "\"od\" TEXT," + // 2: od
                "\"deviceType\" TEXT," + // 3: deviceType
                "\"sensorType\" TEXT," + // 4: sensorType
                "\"area\" TEXT," + // 5: area
                "\"signalIntensity\" TEXT," + // 6: signalIntensity
                "\"connectionQuality\" TEXT," + // 7: connectionQuality
                "\"others\" TEXT," + // 8: others
                "\"gatewayMac\" TEXT," + // 9: gatewayMac
                "\"updateTime\" TEXT," + // 10: updateTime
                "\"whichType\" INTEGER NOT NULL );"); // 11: whichType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String od = entity.getOd();
        if (od != null) {
            stmt.bindString(3, od);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String sensorType = entity.getSensorType();
        if (sensorType != null) {
            stmt.bindString(5, sensorType);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(6, area);
        }
 
        String signalIntensity = entity.getSignalIntensity();
        if (signalIntensity != null) {
            stmt.bindString(7, signalIntensity);
        }
 
        String connectionQuality = entity.getConnectionQuality();
        if (connectionQuality != null) {
            stmt.bindString(8, connectionQuality);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(9, others);
        }
 
        String gatewayMac = entity.getGatewayMac();
        if (gatewayMac != null) {
            stmt.bindString(10, gatewayMac);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
        stmt.bindLong(12, entity.getWhichType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String od = entity.getOd();
        if (od != null) {
            stmt.bindString(3, od);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String sensorType = entity.getSensorType();
        if (sensorType != null) {
            stmt.bindString(5, sensorType);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(6, area);
        }
 
        String signalIntensity = entity.getSignalIntensity();
        if (signalIntensity != null) {
            stmt.bindString(7, signalIntensity);
        }
 
        String connectionQuality = entity.getConnectionQuality();
        if (connectionQuality != null) {
            stmt.bindString(8, connectionQuality);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(9, others);
        }
 
        String gatewayMac = entity.getGatewayMac();
        if (gatewayMac != null) {
            stmt.bindString(10, gatewayMac);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
        stmt.bindLong(12, entity.getWhichType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // od
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sensorType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // area
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signalIntensity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // connectionQuality
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // others
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gatewayMac
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updateTime
            cursor.getInt(offset + 11) // whichType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSensorType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignalIntensity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConnectionQuality(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOthers(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGatewayMac(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWhichType(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
